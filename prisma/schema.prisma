generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String                @id @default(uuid())
  email             String                @unique
  name              String
  password          String
  role              String                @default("student")
  avatar            String?
  bio               String?
  totalXP           Int                   @default(0)
  level             Int                   @default(1)
  streak            Int                   @default(0)
  longestStreak     Int                   @default(0)
  lastActivity      DateTime              @default(now())
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  submissions       ChallengeSubmission[]
  enrollments       Enrollment[]
  progress          LessonProgress[]
  lessonSubmissions LessonSubmission[]
  projectProgress   ProjectProgress[]
  quizAttempts      QuizAttempt[]
  achievements      UserAchievement[]
  badges            UserBadge[]
}

model Course {
  id             String       @id @default(uuid())
  title          String
  slug           String       @unique
  description    String
  level          String
  category       String
  thumbnail      String
  duration       Int
  totalXP        Int
  price          Float        @default(0)
  isPublished    Boolean      @default(false)
  instructorId   String
  instructorName String
  rating         Float        @default(0)
  studentCount   Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  enrollments    Enrollment[]
  phases         Phase[]
}

model Phase {
  id          String   @id @default(uuid())
  courseId    String
  title       String
  description String
  order       Int
  level       String
  duration    String
  totalXP     Int
  modules     Module[]
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Module {
  id          String      @id @default(uuid())
  phaseId     String
  title       String
  quest       String
  description String
  order       Int
  totalXP     Int
  challenges  Challenge[]
  lessons     Lesson[]
  phase       Phase       @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  projects    Project[]

  @@index([phaseId])
}

model Lesson {
  id       String           @id @default(uuid())
  moduleId String
  title    String
  content  String
  videoUrl String?
  duration Int
  order    Int
  xpReward Int              @default(0)
  type     String           @default("lesson")
  module   Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress LessonProgress[]

  @@index([moduleId])
}

model Project {
  id           String  @id @default(uuid())
  moduleId     String
  title        String
  description  String
  xpReward     Int
  requirements String
  starterCode  String?
  solution     String?
  order        Int
  module       Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

model Challenge {
  id          String  @id @default(uuid())
  moduleId    String
  title       String
  description String
  type        String
  xpReward    Int
  difficulty  String
  starterCode String
  testCases   String
  solution    String?
  timeLimit   Int?
  order       Int
  module      Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

model ChallengeSubmission {
  id             String   @id @default(uuid())
  userId         String
  challengeId    String
  code           String
  passed         Boolean  @default(false)
  xpEarned       Int      @default(0)
  completionTime Int?
  submittedAt    DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([challengeId])
}

model LessonSubmission {
  id          String   @id @default(uuid())
  userId      String
  lessonId    String
  stepId      String
  code        String
  passed      Boolean  @default(false)
  testResults String?
  attempts    Int      @default(1)
  xpEarned    Int      @default(0)
  language    String
  submittedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lessonId])
  @@index([stepId])
  @@index([passed])
  @@index([submittedAt])
}

model Quiz {
  id           String         @id @default(uuid())
  title        String
  moduleId     String?
  xpReward     Int            @default(0)
  passingScore Int            @default(80)
  attempts     QuizAttempt[]
  questions    QuizQuestion[]
}

model QuizQuestion {
  id            String  @id @default(uuid())
  quizId        String
  question      String
  options       String
  correctAnswer String
  explanation   String?
  order         Int
  quiz          Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model QuizAttempt {
  id          String   @id @default(uuid())
  userId      String
  quizId      String
  answers     String
  score       Int
  passed      Boolean
  xpEarned    Int      @default(0)
  completedAt DateTime @default(now())
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
}

model Enrollment {
  id             String    @id @default(uuid())
  userId         String
  courseId       String
  status         String    @default("active")
  progress       Float     @default(0)
  enrolledAt     DateTime  @default(now())
  completedAt    DateTime?
  lastAccessedAt DateTime  @default(now())
  course         Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonProgress {
  id          String    @id @default(uuid())
  userId      String
  lessonId    String
  completed   Boolean   @default(false)
  xpEarned    Int       @default(0)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model ProjectProgress {
  id          String    @id @default(uuid())
  userId      String
  projectId   String
  completed   Boolean   @default(false)
  xpEarned    Int       @default(0)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model Achievement {
  id               String            @id @default(uuid())
  name             String            @unique
  description      String
  icon             String
  category         String
  xpReward         Int               @default(0)
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}

model Badge {
  id          String      @id @default(uuid())
  name        String      @unique
  description String
  icon        String
  requirement String
  xpReward    Int         @default(0)
  userBadges  UserBadge[]
}

model UserBadge {
  id       String   @id @default(uuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
}

model Leaderboard {
  id        String   @id @default(uuid())
  userId    String   @unique
  userName  String
  totalXP   Int      @default(0)
  level     Int      @default(1)
  rank      Int      @default(0)
  weeklyXP  Int      @default(0)
  updatedAt DateTime @updatedAt

  @@index([totalXP])
  @@index([weeklyXP])
}
