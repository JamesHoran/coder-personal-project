// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model with gamification
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  password      String
  role          String   @default("student") // student, instructor, admin
  avatar        String?
  bio           String?
  totalXP       Int      @default(0)
  level         Int      @default(1)
  streak        Int      @default(0)           // Current streak in days
  longestStreak Int      @default(0)           // Longest streak achieved
  lastActivity  DateTime @default(now())       // Last activity date
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  enrollments   Enrollment[]
  progress      LessonProgress[]
  projectProgress ProjectProgress[]
  quizAttempts  QuizAttempt[]
  achievements  UserAchievement[]
  badges        UserBadge[]
  submissions   ChallengeSubmission[]
  lessonSubmissions LessonSubmission[]
}

// Course model
model Course {
  id            String   @id @default(uuid())
  title         String
  slug          String   @unique
  description   String
  level         String   // beginner, intermediate, advanced
  category      String
  thumbnail     String
  duration      Int      // in hours
  totalXP       Int      // Total XP available
  price         Float    @default(0)
  isPublished   Boolean  @default(false)
  instructorId  String
  instructorName String
  rating        Float    @default(0)
  studentCount  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  phases        Phase[]
  enrollments   Enrollment[]
}

// Phase (Phase 1, 2, 3 from requirements)
model Phase {
  id          String   @id @default(uuid())
  courseId    String
  title       String
  description String
  order       Int
  level       String   // Explorer, Craftsman, Architect
  duration    String   // e.g., "15-20 hours"
  totalXP     Int

  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  modules     Module[]

  @@index([courseId])
}

// Module (Module 1.1, 1.2, etc.)
model Module {
  id          String   @id @default(uuid())
  phaseId     String
  title       String
  quest       String   // Quest name
  description String
  order       Int
  totalXP     Int

  phase       Phase    @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  projects    Project[]
  challenges  Challenge[]

  @@index([phaseId])
}

// Lesson (individual learning content)
model Lesson {
  id          String   @id @default(uuid())
  moduleId    String
  title       String
  content     String   // Markdown content
  videoUrl    String?
  duration    Int      // in minutes
  order       Int
  xpReward    Int      @default(0)
  type        String   @default("lesson") // lesson, video, reading, quiz

  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]

  @@index([moduleId])
}

// Project (hands-on projects)
// Note: Projects are now stored in TypeScript files, not in database
// This model exists only for future migration purposes
model Project {
  id          String   @id @default(uuid())
  moduleId    String
  title       String
  description String
  xpReward    Int
  requirements String  // JSON array of success criteria
  starterCode String?
  solution    String?
  order       Int

  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

// Challenge (coding challenges)
// Note: Challenges are now stored in TypeScript files, not in database
// This model exists only for future migration purposes
model Challenge {
  id          String   @id @default(uuid())
  moduleId    String
  title       String
  description String
  type        String   // speed, accuracy, boss, etc.
  xpReward    Int
  difficulty  String   // green, yellow, red, purple
  starterCode String
  testCases   String   // JSON array of test cases
  solution    String?
  timeLimit   Int?     // in minutes
  order       Int

  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

// Challenge Submission
model ChallengeSubmission {
  id          String   @id @default(uuid())
  userId      String
  challengeId String   // Reference to challenge ID (not a foreign key, as challenges are in TypeScript files)
  code        String
  passed      Boolean  @default(false)
  xpEarned    Int      @default(0)
  completionTime Int?  // in seconds
  submittedAt DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([challengeId])
}

// Interactive Lesson Submission (for React, TypeScript, etc. courses)
model LessonSubmission {
  id          String   @id @default(uuid())
  userId      String
  lessonId    String   // Interactive lesson ID (e.g., "react-basics-01", "ts-basics-01")
  stepId      String   // Step ID within the lesson
  code        String   // The code submitted by the user
  passed      Boolean  @default(false)
  testResults String?  // JSON of test results
  attempts    Int      @default(1)
  xpEarned    Int      @default(0)
  language    String   // typescript, jsx, tsx, javascript
  submittedAt DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lessonId])
  @@index([stepId])
  @@index([passed])
  @@index([submittedAt])
}

// Quiz
model Quiz {
  id          String   @id @default(uuid())
  title       String
  moduleId    String?
  xpReward    Int      @default(0)
  passingScore Int     @default(80)

  questions   QuizQuestion[]
  attempts    QuizAttempt[]
}

// Quiz Question
model QuizQuestion {
  id          String   @id @default(uuid())
  quizId      String
  question    String
  options     String   // JSON array
  correctAnswer String
  explanation String?
  order       Int

  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

// Quiz Attempt
model QuizAttempt {
  id          String   @id @default(uuid())
  userId      String
  quizId      String
  answers     String   // JSON object of answers
  score       Int
  passed      Boolean
  xpEarned    Int      @default(0)
  completedAt DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
}

// Enrollment
model Enrollment {
  id             String   @id @default(uuid())
  userId         String
  courseId       String
  status         String   @default("active") // active, completed, paused
  progress       Float    @default(0) // 0-100
  enrolledAt     DateTime @default(now())
  completedAt    DateTime?
  lastAccessedAt DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// Lesson Progress
model LessonProgress {
  id          String   @id @default(uuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  xpEarned    Int      @default(0)
  completedAt DateTime?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

// Project Progress
model ProjectProgress {
  id          String   @id @default(uuid())
  userId      String
  projectId   String   // Reference to project ID (not a foreign key, as projects are in TypeScript files)
  completed   Boolean  @default(false)
  xpEarned    Int      @default(0)
  completedAt DateTime?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

// Achievement (predefined achievements)
model Achievement {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  icon        String
  category    String   // foundational, advanced, mastery, special
  xpReward    Int      @default(0)

  userAchievements UserAchievement[]
}

// User Achievement (junction table)
model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}

// Badge (predefined badges)
model Badge {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  icon        String
  requirement String   // Description of how to earn
  xpReward    Int      @default(0)

  userBadges  UserBadge[]
}

// User Badge (junction table)
model UserBadge {
  id         String   @id @default(uuid())
  userId     String
  badgeId    String
  earnedAt   DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge      Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
}

// Leaderboard (materialized view for performance)
model Leaderboard {
  id          String   @id @default(uuid())
  userId      String   @unique
  userName    String
  totalXP     Int      @default(0)
  level       Int      @default(1)
  rank        Int      @default(0)
  weeklyXP    Int      @default(0)
  updatedAt   DateTime @updatedAt

  @@index([totalXP])
  @@index([weeklyXP])
}
