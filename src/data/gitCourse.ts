import type { GamifiedCourse, Phase, Module, Badge } from "@/types";

// Git Course Data based on GIT_COURSE_REQUIREMENTS.md
export const gitCourseBadges: Badge[] = [
  // Foundational Badges
  { id: "badge-1", name: "First Commit", description: "Make your first Git commit", category: "foundational", earned: false },
  { id: "badge-2", name: "Time Traveler", description: "Successfully navigate commit history", category: "foundational", earned: false },
  { id: "badge-3", name: "Branch Creator", description: "Master branch management", category: "foundational", earned: false },
  { id: "badge-4", name: "Remote Worker", description: "Push to remote repository", category: "foundational", earned: false },

  // Collaboration Badges
  { id: "badge-5", name: "Open Source Hero", description: "Get first PR merged", category: "collaboration", earned: false },
  { id: "badge-6", name: "Conflict Resolver", description: "Resolve 10 merge conflicts", category: "collaboration", earned: false },
  { id: "badge-7", name: "Code Reviewer", description: "Complete 20 code reviews", category: "collaboration", earned: false },
  { id: "badge-8", name: "Team Leader", description: "Set up team workflow", category: "collaboration", earned: false },

  // Mastery Badges
  { id: "badge-9", name: "Rebase Wizard", description: "Master interactive rebase", category: "mastery", earned: false },
  { id: "badge-10", name: "History Artist", description: "Create perfect linear history", category: "mastery", earned: false },
  { id: "badge-11", name: "Hook Master", description: "Implement custom Git hooks", category: "mastery", earned: false },
  { id: "badge-12", name: "Performance Guru", description: "Optimize large repository", category: "mastery", earned: false },

  // Special Achievements
  { id: "badge-13", name: "Daily Committer", description: "Commit every day for 30 days", category: "special", earned: false },
  { id: "badge-14", name: "Help Hero", description: "Help 10 people with Git problems", category: "special", earned: false },
  { id: "badge-15", name: "Bug Archaeologist", description: "Find historical bug with bisect", category: "special", earned: false },
  { id: "badge-16", name: "Disaster Recovery", description: "Save team from Git disaster", category: "special", earned: false },
];

const phase1Modules: Module[] = [
  {
    id: "module-1-1",
    phaseId: "phase-1",
    number: "1.1",
    title: "Getting Started with Git",
    questName: "The First Commit",
    description: "Understand what version control is and master the basic Git workflow",
    learningObjectives: [
      "Understand what version control is and why it matters",
      "Install and configure Git",
      "Learn basic Git concepts (repository, commit, branch)",
      "Master the Git workflow basics",
      "Set up Git identity and preferences",
      "Understand working directory, staging area, and repository",
    ],
    projects: [
      {
        id: "proj-1-1-1",
        name: "Personal Code Journal",
        description: "Initialize your first Git repository and create meaningful commits",
        xp: 50,
        successCriteria: ["20+ meaningful commits with proper messages"],
        timeEstimate: "2-3 hours",
      },
    ],
    challenges: [
      { id: "chal-1-1-1", name: "First Steps", description: "Make your first commit", xp: 25, difficulty: "beginner", type: "completion" },
      { id: "chal-1-1-2", name: "Consistency", description: "Commit daily for 7 days", xp: 50, difficulty: "beginner", type: "completion" },
      { id: "chal-1-1-3", name: "Message Master", description: "Write 10 perfect commit messages", xp: 40, difficulty: "beginner", type: "accuracy" },
      { id: "chal-1-1-4", name: "Boss Challenge", description: "Set up Git on 3 different machines", xp: 75, difficulty: "intermediate", type: "boss" },
    ],
    commandsMastered: ["git init", "git config", "git add", "git commit", "git status", "git log", "git diff"],
  },
  {
    id: "module-1-2",
    phaseId: "phase-1",
    number: "1.2",
    title: "Basic Git Operations",
    questName: "Time Travel Basics",
    description: "View and navigate commit history, undo changes, and work with .gitignore effectively",
    learningObjectives: [
      "View and navigate commit history",
      "Understand how to undo changes",
      "Master git restore and git reset",
      "Learn about detached HEAD state",
      "Work with .gitignore effectively",
      "Understand Git file lifecycle",
    ],
    projects: [
      {
        id: "proj-1-2-1",
        name: "Portfolio Website Version Control",
        description: "Track website development changes and practice undoing mistakes safely",
        xp: 100,
        successCriteria: ["Clean history with no sensitive data committed"],
        timeEstimate: "3-4 hours",
      },
      {
        id: "proj-1-2-2",
        name: "Experiment Safely",
        description: "Try different approaches to problems and roll back failed experiments",
        xp: 75,
        successCriteria: ["Successfully recover from 5 different mistake scenarios"],
        timeEstimate: "2 hours",
      },
    ],
    challenges: [
      { id: "chal-1-2-1", name: "Time Traveler", description: "Navigate 50 commits back", xp: 60, difficulty: "beginner", type: "completion" },
      { id: "chal-1-2-2", name: "Clean Slate", description: "Master git reset in 10 scenarios", xp: 80, difficulty: "intermediate", type: "accuracy" },
      { id: "chal-1-2-3", name: "Ignore Master", description: "Create perfect .gitignore for 5 project types", xp: 70, difficulty: "intermediate", type: "accuracy" },
      { id: "chal-1-2-4", name: "Boss Challenge", description: "Recover from 10 disaster scenarios", xp: 150, difficulty: "advanced", type: "boss" },
    ],
    commandsMastered: ["git log (advanced)", "git show", "git diff (advanced)", "git restore", "git reset", "git clean", "git rm", "git mv", ".gitignore patterns"],
    gamificationElements: ["Unlock 'Time Traveler' badge", "Earn 'Mistake Fixer' achievement", "Access to disaster recovery scenarios"],
  },
  {
    id: "module-1-3",
    phaseId: "phase-1",
    number: "1.3",
    title: "Branching Fundamentals",
    questName: "Parallel Universes",
    description: "Understand what branches are and why they're essential for modern development",
    learningObjectives: [
      "Understand what branches are and why they're essential",
      "Create and switch between branches",
      "Master branch naming conventions",
      "Understand branch pointers (HEAD, main, feature branches)",
      "Learn when to create branches",
      "Practice basic branch management",
    ],
    projects: [
      {
        id: "proj-1-3-1",
        name: "Feature Development Simulation",
        description: "Develop 5 features on separate branches with proper naming conventions",
        xp: 150,
        successCriteria: ["5 completed feature branches with clean history"],
        timeEstimate: "4-5 hours",
      },
      {
        id: "proj-1-3-2",
        name: "Parallel Task Management",
        description: "Work on multiple tasks simultaneously without losing work",
        xp: 125,
        successCriteria: ["Successfully manage 3 concurrent tasks on different branches"],
        timeEstimate: "3 hours",
      },
    ],
    challenges: [
      { id: "chal-1-3-1", name: "Branch Master", description: "Create and manage 10 branches", xp: 100, difficulty: "intermediate", type: "completion" },
      { id: "chal-1-3-2", name: "Speed Switch", description: "Switch branches 50 times in practice mode", xp: 75, difficulty: "intermediate", type: "speed" },
      { id: "chal-1-3-3", name: "Organization", description: "Implement branch naming strategy", xp: 90, difficulty: "intermediate", type: "accuracy" },
      { id: "chal-1-3-4", name: "Boss Challenge", description: "Manage 20 concurrent branches", xp: 200, difficulty: "advanced", type: "boss" },
    ],
    commandsMastered: ["git branch", "git switch", "git checkout", "git branch -d", "git branch -m", "git branch -v", "git branch --merged"],
  },
];

const phase2Modules: Module[] = [
  {
    id: "module-2-1",
    phaseId: "phase-2",
    number: "2.1",
    title: "Remote Repositories & GitHub",
    questName: "Join the Global Team",
    description: "Master remote repositories, GitHub workflows, and open source contribution",
    learningObjectives: [
      "Understand remote repositories",
      "Clone existing repositories",
      "Push and pull changes",
      "Fetch vs pull differences",
      "Work with multiple remotes",
      "Understand remote tracking branches",
      "Set up SSH keys for authentication",
    ],
    projects: [
      {
        id: "proj-2-1-1",
        name: "Open Source Contribution",
        description: "Fork a real open-source project and submit your first pull request",
        xp: 200,
        successCriteria: ["Successfully merged PR"],
        timeEstimate: "5-6 hours",
      },
      {
        id: "proj-2-1-2",
        name: "Team Repository Setup",
        description: "Create organization repository with collaboration rules and branch protections",
        xp: 175,
        successCriteria: ["Repository with proper access controls and branch protection"],
        timeEstimate: "3-4 hours",
      },
    ],
    challenges: [
      { id: "chal-2-1-1", name: "First PR", description: "Submit your first pull request", xp: 100, difficulty: "intermediate", type: "completion" },
      { id: "chal-2-1-2", name: "Contributor", description: "Get 5 PRs merged", xp: 200, difficulty: "advanced", type: "completion" },
      { id: "chal-2-1-3", name: "Remote Master", description: "Work with 5 different remotes", xp: 150, difficulty: "advanced", type: "accuracy" },
      { id: "chal-2-1-4", name: "Boss Challenge", description: "Set up complete team workflow", xp: 300, difficulty: "expert", type: "boss" },
    ],
    commandsMastered: ["git clone", "git remote", "git push", "git pull", "git fetch", "git remote add/remove/rename", "git push -u", "git pull --rebase"],
    gamificationElements: ["Unlock 'Open Source Contributor' badge", "Earn 'Team Player' achievement", "Join global leaderboard"],
  },
  {
    id: "module-2-2",
    phaseId: "phase-2",
    number: "2.2",
    title: "Merging & Conflict Resolution",
    questName: "The Merge Master",
    description: "Master different merge strategies and resolve conflicts like a pro",
    learningObjectives: [
      "Understand different merge strategies",
      "Master fast-forward merges",
      "Handle three-way merges",
      "Resolve merge conflicts like a pro",
      "Use merge tools effectively",
      "Understand when to merge vs rebase",
      "Learn about merge commit messages",
    ],
    projects: [
      {
        id: "proj-2-2-1",
        name: "Conflict Resolution Training",
        description: "Practice with 20+ conflict scenarios using various merge tools",
        xp: 250,
        successCriteria: ["Resolve all conflicts correctly"],
        timeEstimate: "6-8 hours",
      },
      {
        id: "proj-2-2-2",
        name: "Multi-Feature Integration",
        description: "Integrate 5 features with overlapping changes while maintaining code quality",
        xp: 225,
        successCriteria: ["All features merged successfully with zero errors"],
        timeEstimate: "5-6 hours",
      },
    ],
    challenges: [
      { id: "chal-2-2-1", name: "First Blood", description: "Resolve your first conflict", xp: 75, difficulty: "intermediate", type: "completion" },
      { id: "chal-2-2-2", name: "Conflict Warrior", description: "Resolve 25 conflicts", xp: 200, difficulty: "advanced", type: "completion" },
      { id: "chal-2-2-3", name: "Clean Merge", description: "Complete 10 merges with zero errors", xp: 175, difficulty: "advanced", type: "accuracy" },
      { id: "chal-2-2-4", name: "Boss Challenge", description: "Resolve 10 three-way conflicts in under 30 min", xp: 400, difficulty: "expert", type: "boss" },
    ],
    commandsMastered: ["git merge", "git merge --no-ff", "git merge --squash", "git mergetool", "git merge --abort", "git diff --ours --theirs"],
  },
  {
    id: "module-2-3",
    phaseId: "phase-2",
    number: "2.3",
    title: "Rebasing & History Management",
    questName: "Rewrite History",
    description: "Master interactive rebase and keep commit history clean",
    learningObjectives: [
      "Understand what rebasing does",
      "Master interactive rebase",
      "Squash commits effectively",
      "Reorder and edit commits",
      "Understand rebase vs merge trade-offs",
      "Learn when NOT to rebase",
      "Handle rebase conflicts",
      "Keep commit history clean",
    ],
    projects: [
      {
        id: "proj-2-3-1",
        name: "History Cleanup",
        description: "Transform chaotic commit history into clean narrative using interactive rebase",
        xp: 300,
        successCriteria: ["Clean, linear history with meaningful commit messages"],
        timeEstimate: "5-7 hours",
      },
      {
        id: "proj-2-3-2",
        name: "Feature Branch Maintenance",
        description: "Keep feature branch updated with main using rebase",
        xp: 275,
        successCriteria: ["Feature branch cleanly rebased onto updated main"],
        timeEstimate: "4-5 hours",
      },
    ],
    challenges: [
      { id: "chal-2-3-1", name: "Squash Master", description: "Squash 20 commit sequences", xp: 150, difficulty: "intermediate", type: "completion" },
      { id: "chal-2-3-2", name: "Interactive Wizard", description: "Complete 15 interactive rebases", xp: 200, difficulty: "advanced", type: "accuracy" },
      { id: "chal-2-3-3", name: "History Artist", description: "Create 5 perfect linear histories", xp: 250, difficulty: "advanced", type: "accuracy" },
      { id: "chal-2-3-4", name: "Boss Challenge", description: "Rebase a 50-commit branch onto updated main", xp: 500, difficulty: "expert", type: "boss" },
    ],
    commandsMastered: ["git rebase", "git rebase -i", "git rebase --onto", "git rebase --continue/--skip/--abort", "git commit --fixup", "git rebase --autosquash"],
    gamificationElements: ["Unlock 'History Rewriter' badge", "Earn 'Clean Slate' achievement", "Access advanced history techniques"],
  },
  {
    id: "module-2-4",
    phaseId: "phase-2",
    number: "2.4",
    title: "Branching Strategies & Workflows",
    questName: "Workflow Architect",
    description: "Master GitFlow, GitHub Flow, and choose the right workflow for your project",
    learningObjectives: [
      "Master GitFlow workflow",
      "Understand GitHub Flow",
      "Learn Trunk-Based Development",
      "Compare workflow strategies",
      "Implement release management",
      "Handle hotfixes properly",
      "Manage long-running branches",
      "Choose right workflow for project",
    ],
    projects: [
      {
        id: "proj-2-4-1",
        name: "Implement GitFlow",
        description: "Set up complete GitFlow structure and release 3 versions",
        xp: 350,
        successCriteria: ["Successfully release 3 versions using GitFlow"],
        timeEstimate: "8-10 hours",
      },
      {
        id: "proj-2-4-2",
        name: "GitHub Flow in Action",
        description: "Implement simplified workflow with rapid deployment",
        xp: 300,
        successCriteria: ["Maintain always-deployable main branch"],
        timeEstimate: "6-7 hours",
      },
    ],
    challenges: [
      { id: "chal-2-4-1", name: "Workflow Implement", description: "Set up 3 different workflows", xp: 200, difficulty: "advanced", type: "completion" },
      { id: "chal-2-4-2", name: "Release Manager", description: "Create 5 releases with proper tagging", xp: 250, difficulty: "advanced", type: "accuracy" },
      { id: "chal-2-4-3", name: "Hotfix Hero", description: "Handle 10 emergency fixes correctly", xp: 225, difficulty: "advanced", type: "speed" },
      { id: "chal-2-4-4", name: "Boss Challenge", description: "Design custom workflow for specific team needs", xp: 600, difficulty: "expert", type: "boss" },
    ],
    realWorldScenarios: ["Startup rapid development", "Enterprise software releases", "Open source project management", "Microservices architecture", "Mobile app releases"],
  },
];

const phase3Modules: Module[] = [
  {
    id: "module-3-1",
    phaseId: "phase-3",
    number: "3.1",
    title: "Advanced Git Operations",
    questName: "The Git Surgeon",
    description: "Master cherry-pick, stash, bisect, reflog, hooks, and advanced debugging techniques",
    learningObjectives: [
      "Master git cherry-pick",
      "Use git stash effectively",
      "Understand git worktree",
      "Learn git bisect for debugging",
      "Master git blame and git log tricks",
      "Use git reflog for recovery",
      "Understand git hooks",
      "Work with submodules and subtrees",
    ],
    projects: [
      {
        id: "proj-3-1-1",
        name: "Advanced Debugging",
        description: "Use git bisect to find bugs and git reflog to recover lost commits",
        xp: 400,
        successCriteria: ["Find and fix 10 historical bugs"],
        timeEstimate: "8-10 hours",
      },
      {
        id: "proj-3-1-2",
        name: "Monorepo Management",
        description: "Set up Git submodules and implement automated hooks",
        xp: 375,
        successCriteria: ["Functional monorepo with automated quality checks"],
        timeEstimate: "7-9 hours",
      },
    ],
    challenges: [
      { id: "chal-3-1-1", name: "Cherry Pick Champion", description: "Successfully pick 25 commits", xp: 200, difficulty: "advanced", type: "completion" },
      { id: "chal-3-1-2", name: "Stash Master", description: "Manage 20 stash operations", xp: 175, difficulty: "intermediate", type: "accuracy" },
      { id: "chal-3-1-3", name: "Bug Hunter", description: "Use bisect to find 10 bugs", xp: 300, difficulty: "advanced", type: "completion" },
      { id: "chal-3-1-4", name: "Archaeologist", description: "Use reflog to recover 5 lost commits", xp: 250, difficulty: "advanced", type: "accuracy" },
      { id: "chal-3-1-5", name: "Boss Challenge", description: "Set up complete automated workflow with hooks", xp: 700, difficulty: "expert", type: "boss" },
    ],
    commandsMastered: ["git cherry-pick", "git stash (all variations)", "git worktree", "git bisect", "git blame", "git reflog", "git log (advanced)", "git submodule", "git subtree", "Git hooks"],
  },
  {
    id: "module-3-2",
    phaseId: "phase-3",
    number: "3.2",
    title: "Git for Teams & Enterprise",
    questName: "Team Leadership",
    description: "Implement team workflows, code review practices, and release management",
    learningObjectives: [
      "Implement team workflows",
      "Set up branch protection rules",
      "Master code review best practices",
      "Understand CODEOWNERS",
      "Implement conventional commits",
      "Use semantic versioning",
      "Manage releases and changelogs",
      "Handle team coordination",
    ],
    projects: [
      {
        id: "proj-3-2-1",
        name: "Team Workflow Implementation",
        description: "Design workflow for 10-person team with all protections and automations",
        xp: 500,
        successCriteria: ["Fully functional team environment"],
        timeEstimate: "12-15 hours",
      },
      {
        id: "proj-3-2-2",
        name: "Release Management System",
        description: "Implement automated versioning and changelog generation",
        xp: 450,
        successCriteria: ["Automated release system with changelog"],
        timeEstimate: "10-12 hours",
      },
    ],
    challenges: [
      { id: "chal-3-2-1", name: "Reviewer Expert", description: "Complete 50 code reviews", xp: 300, difficulty: "advanced", type: "completion" },
      { id: "chal-3-2-2", name: "Policy Maker", description: "Create comprehensive Git policies", xp: 350, difficulty: "expert", type: "accuracy" },
      { id: "chal-3-2-3", name: "Educator", description: "Create training materials for team", xp: 275, difficulty: "advanced", type: "completion" },
      { id: "chal-3-2-4", name: "Boss Challenge", description: "Handle merge disaster for 50-person team", xp: 800, difficulty: "expert", type: "boss" },
    ],
  },
  {
    id: "module-3-3",
    phaseId: "phase-3",
    number: "3.3",
    title: "Git Internals & Optimization",
    questName: "Under the Hood",
    description: "Understand Git's data model and optimize repository performance",
    learningObjectives: [
      "Understand Git's data model",
      "Learn about Git objects (blobs, trees, commits)",
      "Understand how Git stores data",
      "Master pack files and compression",
      "Optimize large repositories",
      "Handle large files with Git LFS",
      "Understand ref and reflog storage",
      "Learn Git's garbage collection",
    ],
    projects: [
      {
        id: "proj-3-3-1",
        name: "Repository Archaeology",
        description: "Explore .git directory structure and create visualization of Git's data model",
        xp: 350,
        successCriteria: ["Complete visualization of Git's internal data model"],
        timeEstimate: "6-8 hours",
      },
      {
        id: "proj-3-3-2",
        name: "Performance Optimization",
        description: "Optimize large repository and implement Git LFS",
        xp: 400,
        successCriteria: ["Reduced clone/fetch times by 50%+"],
        timeEstimate: "8-10 hours",
      },
    ],
    challenges: [
      { id: "chal-3-3-1", name: "Internals Explorer", description: "Document Git's internal structure", xp: 250, difficulty: "advanced", type: "completion" },
      { id: "chal-3-3-2", name: "Performance Tuner", description: "Optimize 5 slow repositories", xp: 300, difficulty: "expert", type: "accuracy" },
      { id: "chal-3-3-3", name: "LFS Master", description: "Migrate large repo to LFS", xp: 275, difficulty: "advanced", type: "completion" },
      { id: "chal-3-3-4", name: "Boss Challenge", description: "Recover corrupted repository", xp: 900, difficulty: "expert", type: "boss" },
    ],
  },
  {
    id: "module-3-4",
    phaseId: "phase-3",
    number: "3.4",
    title: "Git in Real-World Scenarios",
    questName: "Professional Mastery",
    description: "Handle monorepos, CI/CD, security best practices, and Git at scale",
    learningObjectives: [
      "Handle monorepo strategies",
      "Manage multiple projects in Git",
      "Implement continuous integration",
      "Practice security best practices",
      "Handle sensitive data properly",
      "Manage large binary files",
      "Work with Git at scale",
      "Integrate with project tools",
    ],
    projects: [
      {
        id: "proj-3-4-1",
        name: "Enterprise Monorepo",
        description: "Set up monorepo with sparse checkout, partial cloning, and CI/CD",
        xp: 600,
        successCriteria: ["Fully functional monorepo with CI/CD"],
        timeEstimate: "15-20 hours",
      },
      {
        id: "proj-3-4-2",
        name: "Open Source Maintainer",
        description: "Maintain simulated OSS project with contributions, releases, and security handling",
        xp: 550,
        successCriteria: ["Successfully manage 20+ contributions and 3 releases"],
        timeEstimate: "12-15 hours",
      },
    ],
    challenges: [
      { id: "chal-3-4-1", name: "Security Audit", description: "Find and fix 10 security issues", xp: 350, difficulty: "expert", type: "accuracy" },
      { id: "chal-3-4-2", name: "Scale Master", description: "Optimize repo for 1000+ developers", xp: 400, difficulty: "expert", type: "accuracy" },
      { id: "chal-3-4-3", name: "CI/CD Expert", description: "Set up complete pipeline", xp: 375, difficulty: "advanced", type: "completion" },
      { id: "chal-3-4-4", name: "Boss Challenge", description: "Migrate 100+ repo organization to new structure", xp: 1000, difficulty: "expert", type: "boss" },
    ],
  },
];

const gitCoursePhases: Phase[] = [
  {
    id: "phase-1",
    courseId: "git-course",
    number: 1,
    title: "Git Fundamentals",
    level: "Version Control Novice",
    duration: "8-10 hours",
    modules: phase1Modules,
  },
  {
    id: "phase-2",
    courseId: "git-course",
    number: 2,
    title: "Collaboration & Workflows",
    level: "Team Collaborator",
    duration: "10-12 hours",
    modules: phase2Modules,
  },
  {
    id: "phase-3",
    courseId: "git-course",
    number: 3,
    title: "Advanced Git Mastery",
    level: "Git Expert",
    duration: "12-15 hours",
    modules: phase3Modules,
  },
];

const levelThresholds = [
  { level: 1, minXP: 0, title: "Version Control Novice" },
  { level: 2, minXP: 100, title: "Version Control Novice" },
  { level: 3, minXP: 300, title: "Version Control Novice" },
  { level: 4, minXP: 301, title: "Git Apprentice" },
  { level: 5, minXP: 500, title: "Git Apprentice" },
  { level: 6, minXP: 800, title: "Git Apprentice" },
  { level: 7, minXP: 801, title: "Team Collaborator" },
  { level: 8, minXP: 1200, title: "Team Collaborator" },
  { level: 9, minXP: 1500, title: "Team Collaborator" },
  { level: 10, minXP: 1800, title: "Team Collaborator" },
  { level: 11, minXP: 1801, title: "Merge Master" },
  { level: 12, minXP: 2200, title: "Merge Master" },
  { level: 13, minXP: 2700, title: "Merge Master" },
  { level: 14, minXP: 3000, title: "Merge Master" },
  { level: 15, minXP: 3500, title: "Merge Master" },
  { level: 16, minXP: 3501, title: "Git Expert" },
  { level: 17, minXP: 4200, title: "Git Expert" },
  { level: 18, minXP: 4900, title: "Git Expert" },
  { level: 19, minXP: 5500, title: "Git Expert" },
  { level: 20, minXP: 6000, title: "Git Expert" },
  { level: 21, minXP: 6001, title: "Git Guru" },
];

// Calculate total XP
const calculateTotalXP = (phases: Phase[]): number => {
  let total = 0;
  phases.forEach(phase => {
    phase.modules.forEach(module => {
      module.projects.forEach(project => {
        total += project.xp;
      });
      module.challenges.forEach(challenge => {
        total += challenge.xp;
      });
    });
  });
  return total;
};

export const gitCourse: GamifiedCourse = {
  id: "git-course",
  type: "gamified",
  title: "Git & GitHub Complete Course",
  description: "Master Version Control for Professional Development - Transform from beginner to version control expert through gamified learning",
  instructor: {
    id: "instructor-1",
    userId: "user-instructor-1",
    name: "Git Master Team",
    bio: "Professional developers with 10+ years of experience in version control and team collaboration",
    expertise: ["Git", "GitHub", "DevOps", "Team Leadership"],
    coursesCount: 3,
    studentsCount: 50000,
    rating: 4.9,
  },
  thumbnail: "/courses/git-course.jpg",
  price: 89.99,
  enrollmentCount: 15234,
  rating: 4.9,
  duration: 2400, // 40 hours in minutes
  level: "beginner",
  category: "Development Tools",
  lessons: [], // Gamified courses use modules instead
  phases: gitCoursePhases,
  totalXP: calculateTotalXP(gitCoursePhases),
  levelThresholds,
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
};
